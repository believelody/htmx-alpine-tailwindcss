<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/styles.css">
    <title>{{ title }}</title>
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script src="https://unpkg.com/htmx.org@1.8.4"
        integrity="sha384-wg5Y/JwF7VxGk4zLsJEcAojRtlVp1FKKdGy1qN+OMtdq72WRvX/EdRdqg/LOhYeV"
        crossorigin="anonymous"></script>
    <script src="https://unpkg.com/htmx.org/dist/ext/loading-states.js"></script>
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
</head>

<body hx-ext="loading-states"
    x-data="{ currentRoute : window.location.pathname, error: null }"
    x-effect="
        $el.addEventListener('htmx:responseError', ({ detail }) => {
            if (detail.xhr.status === 500) {
                $dispatch('error', 'error-500');
            } else {
                $dispatch('error', JSON.parse(detail.xhr.response));
            }
        });
        navigation.addEventListener('navigate', ({ destination }) => {
            $dispatch('route', new URL(destination.url).pathname);
        });"
    @route="currentRoute = $event.detail"
    @error="error = $event.detail;"
    @modal-closer="if (error) { error = null }"
>
    {{> element/header }}
    <div class="relative flex flex-col overflow-y-auto grow">
        <div x-data="notifier" @notify.window="add()">
            {{> element/notification }}
        </div>
        <main class="relative grow">
            {{!-- {{> loading/base-1 }} --}}
            {{> loading/base-2 size=18 }}
            {{> loading/base-3 }}
            <section id="content" class="relative h-full">
                {{{ body }}}
            </section>
        </main>
        {{> element/footer }}
    </div>
    <div x-data="drawer" x-effect="open = error === 'error-500';">
        {{> element/modal
            modal=(object
                title=(partial 'title/default'
                        text="An error occured"
                        class="text-lg text-danger-500 border rounded-lg text-center py-4")
                component=(partial 'error/500'))
            class="p-8"
        }}
    </div>
</body>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('notifier', (initialState = { notifications: [], timeout: 3000}) => ({
            notifications: initialState.notifications,
            timer: null,
            timeout: initialState.timeout,
            send(notification) {
                this.notifications = [{ id: crypto.randomUUID(), ...notification }, ...this.notifications];
            },
            add() {
                const length = this.notifications.length;
                this.notifications = [...this.notifications, { id: crypto.randomUUID(), type: 'success', title: 'Contact', message: 'Nous avons bien reçu votre demande. Nous reviendrons vers vous dans les plus brefs délai.', timeout: 10000 }];
            },
            remove(notificationId) {
                this.notifications = this.notifications.filter(notification => notification.id !== notificationId);
                clearTimeout(this.timer);
            },
            wrapper: {
                async ['x-show']() {
                    console.log("length before : ", length);
                    await new Promise(resolve => {
                        if (this.notifications.length) {
                            const timeout = this.notifications.at(-1)?.timeout || this.timeout;
                            this.timer = setTimeout(() => {
                                this.notifications.pop();
                                resolve();
                            }, timeout);
                        }
                    })
                    console.log("length before : ", length);
                    return !!this.notifications.length;
                }
            },
        }));
        Alpine.data('drawer', (initialOpenState = false) => ({
            open: initialOpenState,
            lock: false,
            toggle() {
                this.open = !this.open;
                if (!open) {
                    this.$dispatch('modal-closer');
                }
            },
            trigger: {
                ['x-ref']: 'trigger',
                ['@click']() {
                    this.open = true;
                },
            },
            dialogue: {
                ['x-show']() {
                    return this.open;
                },
                ['@click.outside']() {
                    if (!this.lock) {
                        this.open = false;
                        this.$dispatch('modal-closer');
                    }
                },
                ['@keyup.escape.window']() {
                    if (!this.lock) {
                        this.open = false;
                        this.$dispatch('modal-closer');
                    }
                },
            },
            closer: {
                type: 'button',
                ['@click']() {
                    this.open = false;
                    this.$dispatch('modal-closer');
                },
            },
        }));
        {{!-- Alpine.bind('inputType', {}) --}}
    });
</script>
</html>